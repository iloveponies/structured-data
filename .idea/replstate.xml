<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459858646196">{:repl-history {:ide [], :local [&quot;(let [x 42]\n  (* x x))&quot; &quot;use 'structed-data&quot; &quot;(to-a-thing 1)&quot; &quot;(structed-date.do-a-thing 1)&quot; &quot;(do-a-thing 1)&quot; &quot;(spiff [1 2 3])       \n(spiff [1 2 3 4 5 6]) \n(spiff [1 2])         \n(spiff [])            &quot; &quot;(use 'structured-data)\n&quot; &quot;(spiff [1 2 3])    &quot; &quot;(+ 0 nil)&quot; &quot;(+ 0 1)&quot; &quot;(+ nil 1)&quot; &quot;(use 'structured-data)&quot; &quot;(spiff [1,2,3])&quot; &quot;(spiff [1,2])&quot; &quot;(let [[x y z] [1 2 3 4 5 6]]\n  (str x y z))&quot; &quot;(abs 1)&quot; &quot;(defn stars [n]\n  (apply concat (repeat n \&quot; *\&quot;)))\n&quot; &quot;(stars 5) &quot; &quot;(defn stars [n]\n  (apply concat (repeat n \&quot;*\&quot;)))\n&quot; &quot;(stars 5)&quot; &quot;(defn stars2 [n]\n  (apply concat (repeat n \&quot;*\&quot;)))\n&quot; &quot;(stars2\n  5)&quot; &quot;(apply concat (repeat n \&quot;*\&quot;))&quot; &quot;(apply concat (repeat 2 \\*))&quot; &quot;(apply concat (repeat 2 '*))&quot; &quot;(apply concat (repeat 2 \&quot;*\&quot;))&quot; &quot;(repeat 2 \&quot;asd\&quot;)&quot; &quot;(apply concat (repeat 2 \&quot;asd\&quot;))&quot; &quot;(apply str (repeat 2 \&quot;asd\&quot;))&quot; &quot;(let [a-seq [1 2 3]\n      a-set (set a-seq)]&quot; &quot;(let [a-seq [1 2 3]])\n  &quot; &quot;(let [a-seq [1 2 3]] \n  (print a-seq))\n  &quot; &quot;(let [a-seq [1 2 3]\n      a-set (set a-seq)] \n  (print a-seq))\n  &quot; &quot;(let [a-seq [1 2 3 1]] \n  (print a-seq))\n  &quot; &quot;(let [a-seq [1 2 3 1]] \n  (print a-seq)\n  (print a-set))\n  &quot; &quot;(let [a-seq [1 2 3 1]\n      a-set (set a-seq)]\n  (print a-seq)\n  (print a-set))\n  &quot; &quot;(let [a-seq [1 2 3 1]\n      a-set (set a-seq)]\n  (if (== (count a-seq) (count a-set)) true false))\n  \n  &quot;], :remote []}}</component>
</project>