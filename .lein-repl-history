(defn do-a-thing [x] (let [sum (+ x x)] (Math/sqrt sum sum)))
(defn do-a-thing [x] (let [sum (+ x x)] (Math/pow sum sum)))
(do-a-thing 5)
(do-a-thing 3)
(do-a-thing 4)
exit
(defn spiff [x] (get x 3))
(spiff [1 2 3])
(spiff [])
(defn spiff [x] (+ (get x 2) (get x 0))))
(defn spiff [x] (+ (get x 2) (get x 0)))
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2 ])
(spiff [1 2])
exit
(defn cutify [x] (conj x "<3"))
(cutify [1 2 3])
(cutify [])
(cutify ["a" "b"])
exit
(defn point [x y] ([x y]))
(point 4 3)
(defn point [x y] [x y])
(point 4 3)
(point 4 3 1 2 )
(point 4 3 1 2)
(point 4 3)
(point 4 3 2)
exi
exit
(defn rec [[x y]] ([x y]))
(rec [2 4])
(defn rectangle [[x1 x2] rectangle] ([x1 y1]))
(defn rectangle [[x1 x2] rectangle] ([x1 x2]))
(rectangle [1 2])
(rectangle [1 2] [1 2])
(defn rectangle [bottom-left bottom-right]([bottom-left bottom-right]))
(rectangle [1 2])
(rectangle 1 2)
(rectangle [1 2] )
(rectangle [1 2] [12 22])
(defn rectangle [bottom-left top-right] [bottom-left top-right] ([bottom-left top-right]))
(rectangle [1 2] [1 2])
(defn spiff-destructuring [[x1 x2 x3]] (+ (x1 x3)))
(spiff-destructuring [1 2 3])
(defn spiff-destructuring [[x1 x2 x3]][+ (x1 x3)])
(spiff-destructuring [1 2 3])
(defn sum-pairs [[x1 y1] [x2 y2]] [(+ (x1 x2))])
(sum-pairs [1 2] [2 3])
(defn sum-pairs [[x1 y1] [x2 y2]] [(+ (x1 x2)) (+ (x2 y2))])
(sum-pairs [1 2] [2 3])
(defn sum-pairs [[x1 y1] [x2 y2]]
  [(+ x1 x2) (+ y1 y2)])
(sum-pairs [1 2] [2 12])
(defn sum-pairs [[x1 y1] [x2 y2]] (+ x2 y2))
(sum-pairs [1 2] [2 12])
(defn sum-pairs [[x1 x2 x3]] (+ x1 x3))
(sum-pairs [1 2 3])
(sum-pairs [1 2 ])
(sum-pairs [1 2])
(sum-pairs [1 2 3])
(defn spiff-destructuring [[x1 x2 x3]] (+ x1 x3))
(spiff-destructuring [1 3 4])
exit
(defn sum-pairs [[x1 y1]] (+ x1 y1))
(sum-pairs [1 2])
(defn sum-pairs [[x1 y1]] (+ x1 y1))
exit
(use 'structured-data)
(rectangle [1 2] [2 3])
exit
(defn rectangle [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 3])
(defn rectangle [[x1 y1] [x2 y2]] [[x1 y1] [x2 ys]])
(defn rectangle [[x1 y1] [x2 y2]] [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 3])
(defn rectangle [[x1 y1] [x2 y2]] ([x1 y1] [x2 y2]))
(rectangle [1 2] [2 3])
(defn rectangle [[x1 y1] [x2 y2]] [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 3])
(defn height [[x1 y1] [x2 y2]] (- y2 y1))
(height [1 1] [5 1])
(height [1 1] [5 5])
(defn height (rectangle [[x1 y1] [x2 y2]]) (- y2 y1))
exit
(defn rectangle [ [x1 y1] [x2 y2]] [[x1 y2] [x2 y2]])
(rectangle [1 2] [3 2])
(defn rectangle [ [x1 y1] [x2 y2]] [[x1 y2] [x2 y2]])
(defn prueba [[x1 y1] [x2 y2]] (- y2 y1))
(prueba (rectangle [1 2] [2 3]))
prueba
type prueba
(prueba (rectangle [1 2] [2 3]))
(prueba [1 2] [2 3])
(prueba [[1 2] [2 3]])
(defn prueba [[x1 y1] [x2 y2]] (- y2 y1))
(prueba [1 2] [2 4])
(defn prueba [[x1 y1] [x2 y2]] (- y2 y1))
(prueba [1 2] [2 4])
(prueba (rectangle [1 2] [2 3]))
(rectangle [1 2] [2 3])
(defn prueba [[[x1 y1] [x2 y2]]] (- y2 y1))
(prueba (rectangle [1 2] [2 3]))
(defn prueba [x1 y1] [x2 y2] (- y2 y1))
(defn prueba [[x1 y1] [x2 y2]] (- y2 y1))
(prueba (rectangle [1 2] [2 3]))
(defn prueba [[[x1 y1] [x2 y2]]] (- y2 y1))
(prueba (rectangle [1 2] [2 3]))
(prueba (rectangle [1 2] [2 4]))
(rectangle [1 2] [2 3])
(rectangle [1 2] [2 5])
(rectangle [1 2] [2 6])
(defn rectangle [ [x1 y1] [x2 y2]] [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 6])
(prueba (rectangle [1 2] [2 3]))
(prueba (rectangle [1 2] [2 4]))
(prueba (rectangle [1 1] [5 5]))
exit
(defn rectangle [bottom-left top-right]
  [bottom-left top-right])
(rectangle [1 2] [2 3])
exit
(defn square? (let [[[x1 y1] [x2 y2]] rectangle] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] (rectangle [2 4] [2 2])] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [[2 4] [2 2]]] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [[1 2] [2 4]]] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [1 2] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [1 2] (+ x2 y2))
(defn square? (let [[[x1 y1] [x2 y2]] [1 2] (+ x2 y2)
;
(defn square? (let [[[x1 y1] [x2 y2]] [1 2]] (+ x2 y2)
(defn square? (let [[[x1 y1] [x2 y2]] [1 2]] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [[1 2] [2 3]] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [[1 2] [2 3]]] (+ x2 y2)))
(defn square? (let [[[x1 y1] [x2 y2]] [[1 2] [2 3]]]))
(defn square? (let [[x1 y1] [x2 y2]] [[1 2] [2 3]]]))
(defn square? (let [[x1 y1] [x2 y2]] [[1 2] [2 3]]))
(defn square? (let [x1 y1 y2] [1 2 3 4 5]))
(defn square? (let [[x1 y1 y2] [1 2 3 4 5]] (+ x1 y1)))
(defn square? (let [ [x1 y1 y2] [1 2 3 4]] (str x1 "" y2)))
(defn square? (let [[x1 y1 y2] [1 2 3 4]] (str x1 "" y2)))
(let [[x1 y2] [1 2 3])
(let [[x1 y2] [1 2 3]])
(let [[x1 y2] [1 2 3]] (str x1 "asa" y1))
(let [[x1 y2] [1 2 3]] (str x1 "asa" y2))
(defn square (let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(defn square [](let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(square)
(defn square (rectangle [1 3] [2 4])(let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(defn square (rectangle [1 3] [2 4] ) (let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
rectangle
(defn rectangle [x1 y1] [x2 y2])
(defn rectangle [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 3])
(defn rectangle [x1 y1] [x2 y2])
(defn rectangle [[x1 y1] [x2 y2]] [[x1 y1] [x2 y2]])
(rectangle [1 2] [2 3])
(defn square (rectangle [1 3] [2 4] ) (let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(defn square (rectangle [1 3] [2 4]) (let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(defn rectangle [x1 y1] [x2 y2])
(defn rectangle [bottom-left top-right]
  [bottom-left top-right])
(rectangle [1 2] [2 3])
(defn square (rectangle [1 3] [2 4]) (let [[x1 y2] [1 2 3]] (str x1 "asa" y2)))
(defn square [rec1 rec2] (let [[x1 y2] rec1] (str x1 "asa" y2)))
(square [[2 5] [3 2]])
(defn square [[rec1 rec2]] (let [[x1 y2] rec1] (str x1 "asa" y2)))
(square [[2 5] [3 2]])
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] ([x1 y2]))))
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] ([x1 y2])))
(square [[2 5] [3 2]])
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] ([1 2])))
(square [[2 5] [3 2]])
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] (+ 1 2])))
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] (+ 1 2]))
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] (+ 1 2)))
(square [[2 5] [3 2]])
(defn square [[rec1 rec2]] (let [[x1 y2] rec1 [x2 y2] rec2] [1 2]))
(square [[2 5] [3 2]])
(defn rectangle [bottom-left top-right] [x2 ye])
(defn rectangle [bottom-left top-right] [bottom-left top-right])
(rectangle [1 3])
(rectangle [1 3] [2 3])
(rectangle 3 1)
(rectangle [3 1] [3 2])
(rectangle [3 1] [3 2] [3 4])
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (0= (- y1 y1) (-x1 x2))))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (= 0 (- (- y1 y1) (- x1 x2)))))
(square (rectangle [1 2] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (=  (abs (- y1 y2)) (abs (- x1 x2)))))
(defn abs [x] (if (< x 0) -x x))
(defn abs [x] (if (< x 0) (* x -1) x))
(abs (5))
(abs 5)
(abs -5)
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (=  (abs (- y1 y2)) (abs (- x1 x2)))))
(square (rectangle [1 2] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (=  (abs (- x1 x2)) (abs (- y1 y2)))))
(square (rectangle [1 2] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (=  (- x1 x2) (- y1 y2))))
(square (rectangle [1 2] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (=  (- x1 x2) (- y2 y1))))
(square (rectangle [1 2] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] [(- x1 x2) (- y2 y1)]))
(square (rectangle [1 2] [2 2]))
(square (rectangle [1 1] [2 2]))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (= (abs(- x1 x2)) (abs(- y2 y1))))
(defn square [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (= (abs(- x1 x2)) (abs(- y2 y1)))))
(square (rectangle [1 1] [2 2]))
(square (rectangle [3 2] [1 1]))
(square (rectangle [3 2] [1 0]))
exit
(defn sqare [[x 2]] (str "as"x))
(defn sqare [[x 2]] (str "as" x))
(defn sqare [[x y]] (str "as" x))
(sqare 1)
(sqare [1])
(sqare [1 2])
(sqare [1 2 3])
(sqare [1 2 3 3])
(sqare [s])
(sqare ["s"])
(defn sqare [[x]] (str "as" x))
(sqare [{:as 3}])
(sqare {:as 3})
(defn sqare [x] (str "as" x))
(sqare {:as 3})
(sqare [{:as 3}])
(sqare 4])
(sqare 4)
(sqare [4])
(sqare [4] 2)
(defn area [[rec1 rec2]] (let [[x1 y1] rec1] [[x2 y2] rec2] (* (abs (- y2 y1)) (abs(- x2 x1)))))
(defn area [[rec1 rec2]] (let [[x1 y1] rec1] [[x2 y2] rec2] (* x2 x1)))
exit
(defn area [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (* (abs(- y2 y1)) (abs(- x2 x1)))))
(defn abs [x] (if (< x 0) (* x -1) x))
(defn area [[rec1 rec2]] (let [[x1 y1] rec1 [x2 y2] rec2] (* (abs(- y2 y1)) (abs(- x2 x1)))))
(area [[0 1] [2 2]])
(area [[0 1] [5 1]])
(area [[3 1] [10 4]])
exit
(defn point [x y] (x y))
(point 2 3)
(defn point [x y] [x y])
(point 2 3)
exit
(defn contains-point [ [rec1 rec2 point]] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp y1) (<=y1 yp y2)) true false)))
(defn contains-point [ [rec1 rec2 point]] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp y1) (<= y1 yp y2)) true false)))
(contains-point? [[0 0] [2 2]] [1 1])
(contains-point [[0 0] [2 2]] [1 1])
(contains-point [[0 0] [2 2] [1 1]])
(defn contains-point [ [rec1 rec2 point]] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp x2) (<= y1 yp y2)) true false)))
(contains-point [[0 0] [2 2] [1 1]])
(contains-point [[0 0] [2 2] [2 1]])
(contains-point [[0 0] [2 2] [-3 1]])
(point [x y])
exit
(def app-stat [x] x)
(def app-stat 12)
(app-stat)
( (app-stat) )
( str "as " app-stat )
(fn [a] a)
(fn as)
(fn [as])
(fn [k] k)
(fn 4)
(fn [4])
(fn [x] str x)
(fn [x] (str x) 23)
((fn [x] (str x)) 23)
((fn [x]  x) 23)
((#(%) %) 23)
((#(%) ) 23)
((#(%) (str %)) 23)
((#(str %)) 23)
((#(str %)) "a")
(#(str %) "a")
(#( %) "a")
(#(-> %) "a")
(#(-> %1) "a")
(#(-> +(%1 %2)) "a")
(#(-> +(%1 %2)) "a" 2)
(#(-> +(%1 %2)) 2 2)
(#(-> (+ %1 %2)) 2 2)
(#(-> (+ %1 %2)) 2 "a")
(#(-> (+ %1 %2)) 2 12)
(#(+ %1 %2) 2 12)
((fn [x1 y1] (+ x1 y1)) 12 21)
(#(+ %1 %2) 12 21)
(#( %1) 12 )
(#(str %1) 12 )
(#(-> %1) 12 )
exit
 33 (defn contains-point? [ [rec1 rec2] point] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp x2) (<= y1 yp y2)) true false)))
(defn contains-point? [ [rec1 rec2] point] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp x2) (<= y1 yp y2)) true false)))
(defn rectangle [bottom-left top-right]
 17   [bottom-left top-right])
(rectangle [0 0] [3 3])
(defn contains-rectangle? [rec1 rec2] (let [ [xc yc] rec2 [x1 x2] xc (str x1)))
(defn contains-rectangle? [rec1 rec2] (let [ [xc yc] rec2 [x1 x2] xc] (str x1)))
(contains-rectangle? (rectangle [0 1] [2 2]) (rectangle [1 1] [2 3]))
(contains-rectangle? (rectangle [0 1] [2 2]) (rectangle [3 1] ~[2 3]))
(contains-rectangle? (rectangle [0 1] [2 2]) (rectangle [3 1] [2 3]))
(rectangle [1 2] [3 2])
(defn rectangle [bottom-left top-right]
 17   [bottom-left top-right])
(defn contains-point? [ [rec1 rec2] point] (let [ [x1 y1] rec1 [x2 y2] rec2 [xp yp] point] (if (and  (<= x1 xp x2) (<= y1 yp y2)) true false)))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y2] pair1] (contains-point? rec1 [x1 y2] )))
(contains-rectangle? (rectangle [0 0] [3 3]) (rectangle [1 1] [2 2]))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2]) )))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2]) ))))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2]))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2])))))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2]) true))))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2])) true)))
(contains-rectangle? (rectangle [0 0] [3 3]) (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3]) (rectangle [1 1] [3 3]))
(contains-rectangle? (rectangle [0 0] [2 2]) (rectangle [1 1] [3 3]))
(defn contains-rectangle? [rec1 rec2] (let [ [pair1 pair2] rec2 [x1 y1] pair1 [x2 y2] pair2] (if (and (contains-point? rec1 [x1 y1]) (contains-point? rec1 [x2 y2])) true false)))
(contains-rectangle? (rectangle [0 0] [2 2]) (rectangle [1 1] [3 3]))
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn title-length [book] (count (get :title book))) 
(title-length cities)
(defn title-length [book] (count (get book :title))) 
(title-length cities)
(title-length little-schemer)
(defn author-count [book] (count (count (get book :authors))))
(author-count cities)
(defn author-count [book] (count (get book :authors)))
(author-count cities)
(author-count little-schemer)
(defn multiple-authors? [book] (if (> author-count (book) 1) true false))
(multiple-authors? cities)
(defn multiple-authors? [book] (if (> author-count (book) 1)) true false))
(defn multiple-authors? [book] (if (> author-count book 1)) true false))
(defn multiple-authors? [book] (if (> author-count  true false))
(defn multiple-authors? [book] (if (> (author-count book) 1)  true false))
(multiple-authors? cities)
(multiple-authors? little-schemer)
(defn multiple-authors? [book] (if (> (author-count book) 1)  true false))
(defn add-author [book author] (let [ authors (get book :authors)] (conj authors author))) 
(add-author little-schemer {:name "Gerald J. Susman"})
(add-author {:authors [{:name "Juana"}] {:name "Gerald J. Susman"})
(add-author {:authors [{:name "Juana"}]} {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc (get book :authors) (conj authors author)))) 
(add-author {:authors [{:name "Juana"}]} {:name "Gerald J. Susman"})
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc (get book :authors) (count (get book :authors)) (conj authors author)))) 
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc (get book :authors) (count (get book :authors)) author))) 
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors)} (count (get book :authors)) author))) 
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors)} (conj (get book :authors)) author))) 
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors)} (conj (get book :authors) author))) 
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors)} (conj (get book :authors) author))) )
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors) :title (get book :title)})))
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc {:authors (get book :authors)})))
(add-author little-schemer {:name "Gerald J. Susman"})
(defn add-author [book author] (let [ authors (get book :authors)] (assoc book :authors (conj (get book :authors) author))))
(add-author little-schemer {:name "Gerald J. Susman"})
(add-author {:authors [{:name "Juhana"}]} {:name "Gerald J. Susman"})
(defn alive? [author] (contains? author :death-year))
(alive? china)
(alive? octavia)
