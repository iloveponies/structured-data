(get [1 2 3] 1)
(use 'structured-data)
(spiff [1 2 3])
(spiff [1 2 ])
(spiff [1 2])
(use 'structured-data)
(spiff-destructuring [1 2 3])
(spiff-destructuring [7 8 3])
(abs -1)
(Math/abs -1)
(assoc [3 2 1] 1)
(assoc [3 2 1] 1 1)
(assoc [3 2 1] nil 1)
(assoc [3 2 1] (count [3 2 1]) 1)
(true nil)
(boolean nil)
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def cities {:title "The City and the City" :authors [china]})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def books [cities, wild-seed, embassytown, little-schemer])
(books)
books
(map (:title book) books)
(map (fn [book] (:title book)) books)
(repeat 5 "*")
(concat (repeat 5 "*"))
(apply concat (repeat 5 "*"))
str((apply concat (repeat 5 "*")))
(str (apply concat (repeat 5 "*")))
(str (concat (repeat 5 "*")))
(println (str (concat (repeat 5 "*"))))
(println (str (apply concat (repeat 5 "*"))))
(repeat 5 "*")
(str (repeat 5 "*"))
(str ((repeat 5 "*")))
(str (repeat 5 "*"))
(defn stars [n]
  (str (repeat n "*")))
(stars 7)
(stars 1)
  (apply str (repeat 5 "*")))
(defn stars [n]
  (apply str (repeat n "*")))
(stars 7)
(def s [1 2 3 4 5 6])
s
(apply (<= (let [[a b] s])))
(apply <= (let [[a b] s]))
(let [[a b] s] (apply <= a b))
(apply <= s)
(def x [1 3 2 4 5 6])
(apply <= x)
(str "hi" "there")
(use 'structured-data)
(spiff-destructuring [1 2 3])
(> 0 1)
(repeat 5 "*")
(str (repeat 5 "*"))
(str (repeat 5 "*"))))
(str (repeat 5
)
((str (repeat 5 "*")))
(apply str (repeat 5 "*"))
(apply <= [1 2 3])
(apply <= [1 2 1])
(count [1, 2, 3, 4])
(count (set [1, 2, 3, 4]))
(count (set [1, 1, 2, 3, 4]))
(count [1, 1, 2, 3, 4])
(= (count (set [1, 1, 2, 3, 4]) (count [1, 1, 2, 3, 4])))
(= (count (set [1, 1, 2, 3, 4])) (count [1, 1, 2, 3, 4]))
(= (count (set [1, 1, 2, 3, 4])) (count [1, 2, 3, 4]))
(def a [1 1 2 3 4])
(def b [1 2 3 4])
(set a)
(= (set a) b)
(= (set b) b)
(= (count (set b)) (count b))
def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data)
(all-author-names books)
books
(authors books)
(structured-data/authors books)
(:authors books)
(:author books)
(:author (get books 1))
(:author (get 1 books))
(get 1 books)
(get books 1)
(:authors (get books 1))
(get (:authors (get books 1)) 1)
(:authors (get books 1))
all-author-names
(all-author-names books)
(refresh)
(use 'structured-data :reload)
(all-author-names books)
(use 'structured-data :reload)
(all-author-names books)
(map old-book->new-book books)
(map author-name books)
books
(books)
(author-name (get books 1))
(titles books)
books
(use 'structured-data :reload)
(titles books)
china
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
china
(titles books)
(all-author-names books)
(authors books)
(map :name (authors books))
china
(:death-year china)
(if (:death-year china) ("yes") ("no"))
(if (:death-year china) "yes" "no")
(def authors #{china, felleisen, octavia, friedman})
authors
(authors)
