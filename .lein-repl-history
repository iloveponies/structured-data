(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(octavia)
#(->octavia)
#(-> octavia )
#(% (->%) octavia )
(#(% (->%)) octavia )
(#(% (-> %)) octavia )
(#(%1 (-> %1)) octavia )
(str octavia)
(defn title [book] (let [show-title (fn [bo] :name bo)] map show-title book))
(title cities)
(defn title [book] (let [show-title (fn [bo] :title bo)] map show-title book))
(title cities)
(defn title [book] (let [show-title (fn [bo] (:title bo))] map show-title book))
(title cities)
(defn title [book] (let [show-title (fn [bo] :title bo)] map :name book))
(title cities)
(defn title [book] (let [show-title (fn [bo] :title bo)] map :title book))
(title cities)
(defn title [book] ( map :name book))
(title cities)
(title [cities])
(defn title [book] ( map :title book))
(title [cities])
(defn title cities ( map :title book))
(defn title [cities] ( map :title book))
(defn title [book] ( map :title book))
(title [cities])
(str cities)
(title books)
(def books [cities, wild-seed, embassytown, little-schemer])
(title books)
(defn titles [book] ( map :title book))
(titles books)
(defn all-authors-name [book] (let [author-name] (fn [b] (map :name b)) (set (apply concat (map author-name book)))))
(defn all-authors-name [book] (let [author-name (fn [b] (map :name b))] (set (apply concat (map author-name book)))))
(all-authors-name [cities])
(defn all-authors-name [book] (let [author-name (fn [b] (map :name (:authors b)))] (set (apply concat (map author-name book)))))
(all-authors-name [cities])
(defn stars [n] (apply str (repeat n '*')))
(stars 1)
(stars 3)
(defn stars [n] (apply str (repeat n "*")))
(stars 3)
(defn monotonic? [seq1] (if (apply <= seq1) true (apply >= seq2) true))
(defn monotonic? [seq1] (if (apply <= seq1) true (if (apply >= seq2) true)))
(defn monotonic? [seq1] (if (apply <= seq1) true (if (apply >= seq1) true)))
(monotonic? [3 2 2])
(#{12 ,23})
(count #{12 ,23})
(conj  #{12 ,23} 23)
(conj  #{12 ,23} 32)
(contains? 12 #{12,23})
(contains? #{12,23} 12)
(contains? #{12,23} 13)
(defn toogle [a-set elem] (if (contains? a-set elem) (disj a-set elem) (conj a-set elem)))
(toogle #{:a :b :c} :d)
(toogle #{:a :b :c} :a)
(count  #{12,23,12})
(count #{12,23,12})
(rest #{12,23,14})
(rest ( rest #{12,23,14}))
(defn constains-duplicates? [col] (fn rc [coll,elem] (if (empty? coll) false  if (contains? coll elem) true (rc (rest(col)  first (col)))))
(defn constains-duplicates? [col] (fn rc [coll,elem] (if (empty? coll) false  if (contains? coll elem) true (rc (rest(col)  first (col))))))
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) false  if (contains? coll elem) true (rc (rest(col)  first (col))))))
(contains? [12 123] 12)
(contains? [12 123 12 ] 12)
(contains?)
(contains
(contains)
(contains? [12 234] 12)
(.contains [12 32] 12)
(.contains [12 32] 13)
(defn constains-duplicates? [col] (fn rc [coll,elem] (if (empty? coll) false  if (contains? set(coll) elem) true (rc (rest(col)  first (col))))))
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true else (rc rest(coll) first (coll)))) (rc col first col))
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true)) (rc col first col))
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true) (rc col first col))
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true) (rc col first col)))
(constains-duplicates? [])
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true) (rc col first col) col))
(constains-duplicates? [])
(defn constains-duplicates? [col] (fn rc [coll elem] (if (empty? coll) true false) coll first col))
(constains-duplicates? [])
(defn constains-duplicates? [col] (fn rc [c] (if (> c 5) true false) first col))
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] (fn rc [c] (if (> c 5) true false) (rc first col)))
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] (fn fact[x] (if (= x 0 ) 1 (* x (fact (dec x))))) first col)
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] (fn fact[x] (if (= x 0 ) 1 (* x (fact (dec x))))) 5)
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] ( let [funt  fn fact[x] (if (= x 0 ) 1 (* x (fact (dec x))))] (funt 4)))
(defn constains-duplicates? [col] ( let [funt  (fn fact[x] (if (= x 0 ) 1 (* x (fact (dec x))))] (funt 4)))
(defn constains-duplicates? [col] ( let [funt (fn fact[x] (if (= x 0 ) 1 (* x (fact (dec x)))))] (funt 3)))
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] ( let [funt (fn fact[coll elem] (if (empty? coll) true (fact (rest coll) (first coll))))] (funt col)))
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] ( let [funt (fn fact[coll elem] (if (empty? coll) true (fact (rest coll) (first coll))))] (funt col (first col))))
(constains-duplicates? [7 6])
(defn constains-duplicates? [col] ( let [funt (fn fact[coll elem] (if (empty? coll) true (fact (rest coll) (first coll))))] (funt col (first col))))
(contains? #[12 23] 12)
(contains? (set([12 23]) 12)
(set [12 12])
(contains? (set [12 12]) 12)
(defn contains-duplicates? [col] (if (> (count col) (count (set col)))))
(defn contains-duplicates? [col] (if (> (count col) 6 true)))
(defn contains-duplicates? [col] (if (> (count (col)) 6 true)))
(defn contains-duplicates? [col] (if (> count col 5)))
(defn contains-duplicates? [col] (if (> (count col) 5)))
(defn contains-duplicates? [col] (if (> (count col) 5))
(defn contains-duplicates? [col] (if (> (count col) 5)))
(defn contains-duplicates? [col] (if (> (count col) 5) true false))
(defn contains-duplicates? [col] (if (> (count col) (count (set col))) true))
(contains-duplicates? [1 1 2 3 4])
(contains-duplicates? [1 2 3 -40]) ;=> false
(contains-duplicates? [1 2 3 -40]) 
(defn contains-duplicates? [col] (if (> (count col) (count (set col))) true false))
(contains-duplicates? [1 2 3 -40]) 
(defn old-bool->new-book [col] (assoc :authors col (set :authors col) ))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc :authors col (set (:authors col)) ))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (:authors col ))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (set (:authors col )))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc col set (:authors col )))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc( col set (:authors col ))))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc col (set (:authors col ))))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc col set (:authors col ))))
(defn old-bool->new-book [col] (assoc col set (:authors col )))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (assoc col (:authors  set (:authors col ))))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(defn old-bool->new-book [col] (let [auth set (:authors col ))] (assoc col :authors auth))
(defn old-bool->new-book [col] (let [auth set (:authors col )] (assoc col :authors auth))
(defn old-bool->new-book [col] (let [auth set (:authors col)] (assoc col :authors auth)))
(defn old-bool->new-book [col] (let [auth (set (:authors col))] (assoc col :authors auth)))
(old-bool->new-book {:title "The litle Scheme" :authors ["friedmain","jose"]})
(old-book->new-book
  {:awards ["Hugo" "World Fantasy Award" "Arthur C. Clarke Award"
            "British Science Fiction Award"]
   :title "The City and the City"
   :authors [{:birth-year 1972, :name "China Miéville"}]})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(-> books)
(defn has-author? [book author] (contains? :authors book author))
(has-author? cities friedman)
(defn has-author? [book author] (contains? (:authors book) author))
(has-author? cities friedman)
(has-author? cities china)
(defn authors [books] (apply clojure.set/union :authors books))
(authors [cities, wild-seed])
(defn authors [books] (apply clojure.set/union (:authors books)))
(authors [cities, wild-seed])
(defn authors [books] (:authors books))
(authors cities)
(defn authors [books] (apply clojure.set/union :authors books))
(authors cities)
(defn authors [books] (apply clojure.set/union  books))
(defn authors [books] (apply clojure.set/union set(:authors books)))
(authors cities)
(defn authors [books] (apply clojure.set/union (:authors books))
(authors cities)
(defn authors [books] (apply clojure.set/union (:authors books)))
(authors cities)
(authors [cities wild-seed])
(authors [cities, wild-seed])
(defn authors [books] (map :authos  books))
(authors [cities, wild-seed])
(defn authors [books] (map :authors  books))
(authors [cities, wild-seed])
(defn authors [books] (apply clojure.set/union ( map :authors  books)))
(authors [cities, wild-seed])
(defn authors [books] (clojure.set/union ( map :authors  books)))
(authors [cities, wild-seed])
(defn authors [books] (apply clojure.set/union ( map :authors  books)))
(authors [cities, wild-seed])
(str cities(
(cities)
(-> cities)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(cities)
(str cities)
(defn authors [books] (apply clojure.set/union ( map :authors  books)))
(authors [cities, wild-seed])
(defn all-author-name [books] (apply clojure.set/union :name (authors books)))
(all-author-name books)
(defn all-author-name [books] (:name (authors books)))
(all-author-name books)
(authors books)
(:name authors books)
(:name (authors books))
(authors books)
(map :name (authors books))
(defn all-author-name [books] (apply (clojure.set/union  map :name (authors books))))
(all-author-name books)
(defn all-author-name [books] (map :name (authors books)))
(all-author-name books)
(defn all-author-name [books] (set(map :name (authors books))))
(all-author-name books)
(all-author-name [])
(octavia)
(str octavia)
(-> octavia)
(defn author->string [author] (let [name :name author death :death-year author birth-year :birth-year author] (str name (if (> (count birth-year) 0) "(" birth-year)))))
(defn author->string [author] (let [name :name author death :death-year author birth-year :birth-year author] (str name)))
(defn author->string [author] (let [ name :name author death :death-year author birth-year :birth-year author] (str name)))
(defn author->string [author] (let [name-author :name author] (str name-author)))
(defn author->string [author] (let [name-author (:name author)] (str name-author)))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year)](str name (if (> (count death-year) 0)) "(" death-year ))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year)](str name (if (> (count death-year) 0)) "\(" death-year ))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year)](str name (if (> (count death-year) 0)) "\(" death-year )))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year)](str name (if (> (count death-year) 0)) "\(" death-year ))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year)] (-> name (if (> (count death-year) 0)) "(" death-year ")")))
(author->string octavia)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (-> name (if (> (count death-year) 0)) "(" death-year ")")))
(author->string octavia)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (-> name (if (> (count death-year) 0)) str "(" death-year ")")))
(author->string octavia)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (if (> (count death-year) 0)) str "(" death-year ")")))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (name-author (if (> (count death-year) 0)) str "(" death-year ")")))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (name-author (if (> (count death-year) 0)) str ("(" death-year ")"))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (name-author (if (> (count death-year) 0)) str (death-year))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (> (count death-year) 0)) str name-author death-year)))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (> (count death-year) 0)) str name-author death-year))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (> (count death-year) 0)) (str name-author death-year)))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if ( > (count death-year) 0) (str name-author death-year)))) 
(author->string octavia)
(str octavia)
(empty? :death-year octavia)
(empty? (:death-year octavia))
(contains? :death-year octavia)
(contains? octavia :death-year)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (not (empty? death-year) (str name-author death-year)))) 
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (not (empty? death-year) (str name-author death-year)))) )
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (not (empty? death-year) (str name-author death-year)))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (not (empty? death-year))) (str name-author death-year)))
(empty? )
(empty? [])
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author death-year)))
(author->string octavia)
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (contains? author :death-year) str (name-author "(" death-year ")"))))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (contains? author :death-year) str (name-author "(" death-year ")"))))
(contains? octavia :death-year)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (contains? author :death-year) (str (name-author "(" death-year ")")))))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str author death-year)))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author death-year)))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (empty?(death-year)))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (empty?(death-year)))))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (nil?(death-year)))))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (nil? death-year)))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (nil? death-year))))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (if (not (nil? birth-year))) birth-year)))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (str name-author (if (not (nil? birth-year)))(-> birth-year))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not(nil? death-year) not(nil? birth-year))))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year) not (nil? birth-year))))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not(nil? birth-year))))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (nil? death-year) (nil? birth-year)))))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (nil? death-year) (nil? birth-year))) true))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (nil? death-year) (nil? birth-year))) true false))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (nil? birth-year)) true))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if nil? birth-year) true))
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not nil? birth-year) (not nil? death-year))) true))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not nil? birth-year) (not nil? death-year))) true ))
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not nill? death-year) (not nill? birth-year)) true ))) 
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not nil? death-year) (not nil? birth-year)) true ))) 
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) true ))) 
(author->string felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) true ))) 
(felleisen)
(str felleisen)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) (str name-author "(" birth-year "-" death-year ")") (str name-author)))) 
(str felleisen)
(author->string felleisen)
(author->string octavia)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) (str name-author " (" birth-year "-" death-year ")") (str name-author)))) 
(author->string octavia)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) (str name-author " (" birth-year " - " death-year ")") (str name-author)))) 
(author->string octavia)
(author->string friedman)
(defn author->string [author] (let [name-author (:name author) birth-year (:birth-year author) death-year (:death-year author)] (if (or (not (nil? death-year)) (not (nil? birth-year))) (str name-author " (" birth-year " - " death-year ")") (str name-author))))
(defn authors->string [authors] (apply str (interponse ","  map author->string author)))
(defn authors->string [authors] (apply str (interpose ","  map author->string author)))
(defn authors->string [authors] (apply str (interpose ","  map author->string authors)))
(authors->string (:authors little-schemer))
(defn authors->string [authors] (apply str (interpose ","  map author->string authors)))
(authors->string (:authors little-schemer))
(defn authors->string [authors] (apply str (interpose ","  (map author->string authors))))
(authors->string (:authors little-schemer))
(defn authors->string [authors] (apply str (interpose ", "  (map author->string authors))))
(authors->string (:authors little-schemer))
(defn book->string [book] (str (:name book) (author->string book)))
(book->string wild-seed)
(author->string wild-seed)
(defn book->string [book] (str (:name book) (author->string (:book book))))
(author->string wild-seed)
(defn book->string [book] (author->string (:authors book))))
(defn book->string [book] (author->string (:authors 
(defn book->string [book] (author->string (:authors book)))
(author->string wild-seed)
(wild-seed)
(str wild-seed)
(:authors wild-seed)
(author->string (:authors book))
(author->string (:authors wild-seed))
(authors->string (:authors wild-seed))
(defn book->string [book] (authors->string (:authors book)))
(book->string wild-seed)
(defn book->string [book] (str (:name book) ", written by " authors->string (:authors book)))
(book->string wild-seed)
(defn book->string [book] (str (:name book) ", written by " authors->string (:authors book)))
(book->string wild-seed)
(defn book->string [book] (str (:name book) ", written by "))
(book->string wild-seed)
(str wild-seed)
(defn book->string [book] (str (:title book) ", written by "))
(book->string wild-seed)
(defn book->string [book] (str (:title book) ", written by " (authors->string (:authors book))))
(book->string wild-seed)
(book->string little-schemer)
(defn book->string [book] (str (:title book) ", written by " (author->string (:authors book))))
(book->string little-schemer)
(defn book->string [book] (str (:title book) ", written by " (authors->string (:authors book))))
(book->string little-schemer)
(:authors little-schemer)
(defn book->string [book] (str (:title book) ", written by " (authors->string (:authors book))))
(book->string little-schemer)
(defn books->string [books] (if (< (count books) 1) str "No books." (str (count books) "books" (apply (str (map book->string books))))))
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "books" (apply (str (map book->string books))))))
(books->string [little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "books" (apply concat (map book->string books))))))
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "books" (apply concat (map book->string books)))))
(books->string [little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "books" (apply str (map book->string books)))))
(books->string [little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "book" (if (> (count books) 1) (str "s")) (apply str (map book->string books)))))
(books->string [little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "book" (if (> (count books) 1) (str "s ") (str " ")) (apply str (map book->string books)))))
(books->string [little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) " book" (if (> (count books) 1) (str "s. ") (str ". ")) (apply str (map book->string books)))))
(books->string [little-schemer])
(books->string [little-schemer cities])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "book" (if (> (count books) 1) (str "s ") (str " ")) (apply str (map book->string books) ". "))))
(books->string [little-schemer cities])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) "book" (if (> (count books) 1) (str "s ") (str " ")) (apply str (interpose ". " (map book->string books))))))
(books->string [little-schemer cities])
(books->string cities)
(books->string [cities])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) " book" (if (> (count books) 1) (str "s ") (str " ")) (apply str (interpose ". " (map book->string books))))))
(books->string [cities])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) " book" (if (> (count books) 1) (str "s ") (str ". ")) (apply str (interpose ". " (map book->string books))))))
(books->string [cities])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) " book" (if (> (count books) 1) (str "s ") (str ". ")) (apply str (interpose ". " (map book->string books))))))
(books->string [cities])
(books->string [cities little-schemer])
(defn books->string [books] (if (< (count books) 1) (str "No books.") (str (count books) " book" (if (> (count books) 1) (str "s ") (str ". ")) (apply str (interpose ". " (map book->string books))) (str "."))))
(books->string [cities])
(str books)
(-> little-schemer(
(-> little-schemer)
(defn books-by-author [author book] (filter has-author? author book))
(books-by-author china books)
(defn books-by-author [author book] (filter (has-author?) author book))
(books-by-author china books)
(defn books-by-author [author book] (filter (has-author?)  [author book]))
(books-by-author china books)
(defn books-by-author [author book] (filter (has-author? %1 %2)  [author book]))
(defn books-by-author [author book] (filter (has-author?) %1 %2  [author book]))
(defn books-by-author [author book] (filter (has-author?)  [author book]))
(books-by-author china books)
(defn books-by-author [author book] (filter has-author?  [author book]))
(books-by-author china books)
(defn books-by-author [author book] (filter has-author? author book))
(books-by-author china books)
(defn books-by-author [author book] (filter (has-author?) author book))
(books-by-author china books)
(defn books-by-author [author book] (filter has-author? author book))
(books-by-author china books)
(defn books-by-author [author book] (filter has-author? author book))
(has-author?)
(str has-author?)
(has-author? cities china)
(defn books-by-author [author books] (filter has-author? author books))
(books-by-author china books)
(defn books-by-author [author books] (filter has-author? books))
(books-by-author china books)
(defn books-by-author [author books] (filter has-author? author books))
(books-by-author china books)
(defn books-by-author [author books] (filter (fn [book] ( has-author? author book)) books))
(books-by-author china books)
(books-by-author octavia books)
(-> books)
(defn books-by-author [author books] (filter (fn [book] ( has-author? book author)) books))
(books-by-author china books)
(books-by-author octavia books)
(first "Octavia E buller")
(def authors #{china, felleisen, octavia, friedman})
(-> authors)
(first authors)
(defn author-by-name [name authors] (filter (fn [author] (= (:name author) name)) authors))
(author-by-name "Octavia E. Butler" authors)
(first (author-by-name "Octavia E. Butler" authors))
(:name (author-by-name "Octavia E. Butler" authors))
((:name (author-by-name "Octavia E. Butler" authors)))
(author-by-name "Octavia E. Butler" authors)
(:name author-by-name "Octavia E. Butler" authors)
(:name (author-by-name "Octavia E. Butler" authors))
(author-by-name "Octavia E. Butler" authors)
(author-by-name "China Miéville" authors)  
(author-by-name "R.R" authors)  
(defn author-by-name [name authors] (filter (fn [author] (= (:name author) name)) authors))
(defn author-by-name [name authors] (first (filter (fn [author] (= (:name author) name)) authors)))
(author-by-name "China Miéville" authors)  
(author-by-name "R.R" authors)  
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(empty? #{})
(-> wild-seed)
(defn alive? [author] (not(contains? author :death-year)))
(defn living-authors [authors] (filter (fn [author] (alive? author)) authors))
(living-authors wild-seed)
(-> wild-seed)
(living-authors authors)
(living-authors #{octavia})
(living-authors #{china,felleisen})
(-> deus-irae)
(-> wild-seed)
(alive? wild-seed)
(alive? :authors wild-seed)
(alive? (:authors wild-seed))
(defn has-a-living-author? [book] ( (filter (fn [author] (alive? author)) (:authors book))))
(has-a-living-author? cities)
(str cities)
((:authors cities))
(:authors cities)
(defn has-a-living-author? [book] (if (> (count (living-authors (:authors book))) 0) true false)) 
(has-a-living-author? wild-seed)
(has-a-living-author? silmarillion)
(defn books-by-living-authors [books] (filter (fn [book] (living-authors (:authors book))) books))
(books-by-living-authors books)
(defn books-by-living-authors [books] (filter (fn [book] (living-authors (:authors book))) books))
(books-by-living-authors books)
(-> wild-seed)
(living-authors (:authors wild-seed))
(defn books-by-living-authors [books] (filter (fn [book] (not (nill? living-authors (:authors book)))) books))
(defn books-by-living-authors [books] (filter (fn [book] (not (nil? living-authors (:authors book)))) books))
(defn books-by-living-authors [books] (filter (fn [book] (not (nil? living-authors (:authors book))) books))
(defn books-by-living-authors [books] (filter (fn [book] (not (nil? living-authors (:authors book))) books)))
(defn books-by-living-authors [books] (filter (fn [book] (not (nil? (living-authors (:authors book)))) books)))
(books-by-living-authors books)
(defn books-by-living-authors [books] (filter (fn [book] (not (nil? (living-authors (:authors book))))) books))
(books-by-living-authors books)
(nil? (living-authors (:authors wild-seed)))
(empty? (living-authors (:authors wild-seed)))
(defn books-by-living-authors [books] (filter (fn [book] (not (empty? (living-authors (:authors book))))) books))
(books-by-living-authors books)
