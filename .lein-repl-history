(defn do-a-thing [x] (let [sum (+ x x)] (Math/sqrt sum sum)))
(defn do-a-thing [x] (let [sum (+ x x)] (Math/pow sum sum)))
(do-a-thing 5)
(do-a-thing 3)
(do-a-thing 4)
exit
(defn spiff [x] (get x 3))
(spiff [1 2 3])
(spiff [])
(defn spiff [x] (+ (get x 2) (get x 0))))
(defn spiff [x] (+ (get x 2) (get x 0)))
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2 ])
(spiff [1 2])
exit
(defn cutify [x] (conj x "<3"))
(cutify [1 2 3])
(cutify [])
(cutify ["a" "b"])
exit
(defn point [x y] ([x y]))
(point 4 3)
(defn point [x y] [x y])
(point 4 3)
(point 4 3 1 2 )
(point 4 3 1 2)
(point 4 3)
(point 4 3 2)
exi
exit
(defn rec [[x y]] ([x y]))
(rec [2 4])
(defn rectangle [[x1 x2] rectangle] ([x1 y1]))
(defn rectangle [[x1 x2] rectangle] ([x1 x2]))
(rectangle [1 2])
(rectangle [1 2] [1 2])
(defn rectangle [bottom-left bottom-right]([bottom-left bottom-right]))
(rectangle [1 2])
(rectangle 1 2)
(rectangle [1 2] )
(rectangle [1 2] [12 22])
(defn rectangle [bottom-left top-right] [bottom-left top-right] ([bottom-left top-right]))
(rectangle [1 2] [1 2])
(defn spiff-destructuring [[x1 x2 x3]] (+ (x1 x3)))
(spiff-destructuring [1 2 3])
(defn spiff-destructuring [[x1 x2 x3]][+ (x1 x3)])
(spiff-destructuring [1 2 3])
(defn sum-pairs [[x1 y1] [x2 y2]] [(+ (x1 x2))])
(sum-pairs [1 2] [2 3])
(defn sum-pairs [[x1 y1] [x2 y2]] [(+ (x1 x2)) (+ (x2 y2))])
(sum-pairs [1 2] [2 3])
(defn sum-pairs [[x1 y1] [x2 y2]]
  [(+ x1 x2) (+ y1 y2)])
(sum-pairs [1 2] [2 12])
(defn sum-pairs [[x1 y1] [x2 y2]] (+ x2 y2))
(sum-pairs [1 2] [2 12])
(defn sum-pairs [[x1 x2 x3]] (+ x1 x3))
(sum-pairs [1 2 3])
(sum-pairs [1 2 ])
(sum-pairs [1 2])
(sum-pairs [1 2 3])
(defn spiff-destructuring [[x1 x2 x3]] (+ x1 x3))
(spiff-destructuring [1 3 4])
exit
