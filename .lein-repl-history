(use 'structured-data)
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2])
(spiff [])
1 + nil
(+ 1 nil)
(use 'structured-data :reload)
(cutify [1 2 3])
(cutify [])
(use 'structured-data :reload)
(spiff-destructing [1 2 3])
(spiff-destructuring [1 2 3])
(spiff-destructuring [1 2 10])
(spiff-destructuring [1 2])
clear
(use 'structured-data :reload)
(width (rectangle [1 1] [5 1]))
(use 'structured-data :reload)
(height (rectangle [1 1] [5 1]))
(height (rectangle [1 1] [5 5]))
(use 'structured_data)
(use 'structured-data)
(square [[1 1] [2 2]])
(square? [[1 1] [2 2]])
(square? [[1 1] [2 3]])
(use 'structured-data :reload)
(area [[1 1] [2 3]])
(area [[1 1] [2 2]])
(area (rectangle [1 1] [5 1]))
(square? (rectangle [1 1] [5 1]))
(area (rectangle [0 0] [4 3])) 
(use 'structured_data)
(use 'structured-data)
contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))  
(
contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))  )
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))   
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1))   
(contains-point? (rectangle [1 1] [1 1])
                 (point 1 1))   
