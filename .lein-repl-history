(defn do-a-thing [x]
  :-)
(do-a-thing 1)
exit
(defn spiff [v]
  (+ (get v 0) (get v 2)))
(spiff [1 2 3])
spiff [1 2])
(get [] 0!
)
(get [] 0)
(+ nil 1)
(defn cutify [v]
  (conj v "<3"))
(cutify [1 2 3]) => [1 2 3 "<3"]
(cutify ["a" "b"])
(defn width [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
  (cond
    (< x1 x2) (- x2 x1)
    (> x1 x2) (- x1 x2)
    :else 0)))
(width (rectangle [1 1] [5 1]))
(defn rectangle [bottom-left top-right]
  [bottom-left top-right])
(width (rectangle [1 1] [5 1]))
(width (rectangle [1 1] [1 1]))
(width (rectangle [3 1] [10 4]))
(defn width [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
  (- x2 x1)))
(width (rectangle [1 1] [5 1]))
(defn height [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
  (- y2 y1)))
(height (rectangle [0 0] [2 3]))
(defn square? [rectangle]
  (== (width rectangle) (height rectangle)))
(square? (rectangle [1 1] [2 2]))
(square? (rectangle [1 1] [2 3]))
(defn area [rectangle]
  (* (width rectangle) (height rectangle)))
(area (rectangle [3 1] [10 4]))
(area (rectangle [1 1] [5 1]))
quit
(defn element-lengths [collection]
  (map count collection))
(element-lengths ["foo" "bar" "" "quux"])
(element-lengths ["x" [:a :b :c] {:y 42}])
(defn second-elements [collection]
  (let [second (fn [x] (get x 1))]
  (map second collection)))
(second-elements [[1 2] [2 3] [3 4]])
(second-elements [[1 2 3 4] [1] ["a" "s" "d" "f"]])
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def books [cities, wild-seed, embassytown, little-schemer])
(defn titles [books]
  (map :title books))
(titles books)
(defn stars [n]
  (str (repeat n "*")))
(stars 3) ;=> "***"
(stars 3)
(stars 1)
(defn stars [n]
  (apply str (repeat n "*")))
(stars 1)
(stars 3)
(stars 4)
(defn monotonic? [a-seq]
  (or (apply <= a-seq)
    (apply >= a-seq)))
(monotonic? [1 2 3])
(monotonic? [0 1 10 11])
(monotonic? [3 2 0 -3])
(monotonic? [3 2 2])
(monotonic? [1 2 1 0])
(defn toggle [a-set elem]
  (if (contains? a-set elem)
  (conj a-set elem)
  (disj a-set elem)))
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a)
(defn toggle [a-set elem]
  (if (contains? a-set elem)
  (disj a-set elem)
  (conj a-set elem)))
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a)
(defn contains-duplicates? [a-seq]
  (== (count a-seq) (count (set a-seq))))
(contains-duplicates? [1 1 2 3 -40])
(contains-duplicates? [1 2 3 -40])
(contains-duplicates? [1 2 3 "a" "a"])
(defn contains-duplicates? [a-seq]
  (not (== (count a-seq) (count (set a-seq)))))
(contains-duplicates? [1 1 2 3 -40])
(contains-duplicates? [1 2 3 -40])
(contains-duplicates? [1 2 3 "a" "a"])
(defn old-book->new-book [book]
  (assoc book :authors (set (:authors book))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (conj (:authors book)))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (concat (:authors book)))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (apply concat (:authors book)))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (apply concat (map :authors book))))))
)
(defn old-book->new-book [book]
  (assoc book :authors (set (apply concat (map :authors book)))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (map :authors book))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (map :authors book))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
friedman
(:authors {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (set (:authors book)))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn old-book->new-book [book]
  (assoc book :authors (set (:authors book))))
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(old-book->new-book {:title "Wild Seed", :authors [octavia]})
exit
(old-book->new-book
  {:awards ["Hugo" "World Fantasy Award" "Arthur C. Clarke Award"
            "British Science Fiction Award"]
   :title "The City and the City"
   :authors [{:birth-year 1972, :name "China Miéville"}]})
;=> {:awards ["Hugo" "World Fantasy Award" "Arthur C. Clarke Award"
;             "British Science Fiction Award"]
;    :title "The City and the City"
;    :authors #{{:birth-year 1972, :name "China Miéville"}}}
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(defn has-author? [book author]
  (contains? book author))
(has-author? cities china)
(has-author? cities felleisen)
(has-author? little-schemer felleisen)
(defn has-author? [book author]
  (contains? (:authors book) author))
(has-author? little-schemer felleisen)
(has-author? cities felleisen)
(defn authors [books]
  (clojure.set/union (:authors books)))
(authors [cities, wild-seed])
(defn authors [books]
  (clojure.set/union (apply (:authors books))))
(authors [cities, wild-seed])
(defn authors [books]
  (apply clojure.set/union (:authors books)))
(authors [cities, wild-seed])
exit
