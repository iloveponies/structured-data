(use 'structured-data)
(use 'midje.repl)
(autotest)
(doc midje-repl)
 (check-facts :all)
(use 'midje.repl)
 (check-facts :all)
(autotest)
 (check-facts :all)
(use 'structured-data)
(do-a-thing 3)
(element-lengths ["ad" "4324324"])
 (check-facts :all)
(use 'structured-data)
(second-elements [[1 1 1] [2 2 2]])
 (check-facts :all)
(repeat 5 "*")
(concat (repeat 5 "*"))
(apply concat (repeat 5 "*"))
(str (apply concat (repeat 5 "*")))
(apply str (apply concat (repeat 5 "*")))
(apply str concat (repeat 5 "*"))
 (check-facts :all)
(contains? [:a :b] :a)
(contains? #{:a :b} :a)
(contains? #{:a :b} :c)
 (check-facts :all)
(use 'structured-data)
(contains-duplicates? [1 2 3])
(use 'structured-data)
(contains-duplicates? [1 2 3])
(contains-duplicates? #{1 2 3})
(use 'structured-data)
(contains-duplicates? #{1 2 3})
(use 'structured-data)
(contains-duplicates? #{1 2 3})
(1 #{1 2 3})
(count #{1 2 3})
(count #{1 2 3} 1)
(count 1 #{1 2 3})
(apply and [true true])
(apply boolean [true true])
(use 'structured-data)
(contains-duplicates? [1 2 3])
(use 'structured-data)
(contains-duplicates? [1 2 3])
(use 'structured-data)
(contains-duplicates? [1 2 3])
(contains-duplicates? #{1 2 3})
(use 'structured-data)
(contains-duplicates? #{1 2 3})
(use 'structured-data)
(contains-duplicates? #{1 2 3})
(use 'structured-data)
(contains-duplicates? #{1 2 3})
(contains-duplicates? #{1 2 3 1})
((fn [elem] (contains? (disj (seq [1 2 3]) elem) elem)) 1)
((fn [elem] (contains? (disj #{1 2 3} elem) elem)) 1)
((fn [elem] (contains? (disj #{1 2 3 1} elem) elem)) 1)
(disj #{1 2 3} 1)
(rest (disj #{1 2 3} 1))
(first (disj #{1 2 3} 1))
(disj #{1 2 3} 1)
(disj #{1 2 3 1} 1)
(disj #{1 2 3 4} 1)
(filter (fn[x] (= x 1)) #{1 2 3 4})
(filter (fn[x] (= x 1)) #{1 2 3 4 1})
(filter (fn[x] (= x 1)) [1 2 3 4 1])
((fn [elem] (contains? (disj [1 2] elem) elem)) 1)
(disj [1 2] 1)
(and true true)
(and true true true)
(and [true true true])
(apply and [true true true])
(apply str [true true true])
(str [true true true])
(apply = [true true true])
(apply = [true true false])
(apply = [true false true])
(let [a-seq [1 2 3]] (map (fn [elem] (contains? a-seq elem)) a-seq))
(contains? [1 2 3] 1)
(contains? [1 2 3] 3)
(contains? [1 2 3] 2)
(contains? [1 2 3] 0)
(set [1 2 3])
(set [1 2 3 1])
(autotest)
 (check-facts :all)
(contains? #{1 2 3} 1)
(contains? #{1 2 "fd"} "fd")
 (check-facts :all)
(use 'structured-data)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(books)
(str books)
(authors books)
(use 'structured-data)
(authors books)
(first books)
(use 'structured-data)
(authors books)
(autotest)
(use 'midje-repl)
(use 'midje.repl)
(autotest)
(authors books)
(map :authors books)
(map :name (map :authors books))
(first (map :authors books))
(:name (first (map :authors books)))
(apply :name (map :authors books)))
(apply string (map :authors books)))
(apply str (map :authors books))
(apply :name (map :authors books))
(map :authors books)
(first (map :authors books))
(map :name (first (map :authors books)))
(concat (map :authors books))
(map :authors books)
(clojure.set/union (map :authors books))
(set (map :authors books))
(map (fn [x] (map :name x)) (map :authors books))
(set (map (fn [x] (map :name x)) (map :authors books)))
(apply str (set (map (fn [x] (map :name x)) (map :authors books))))
(set (map (fn [x] (map :name x)) (map :authors books)))
(set (map :authors books)))
(set (map :authors books))
(map :authors books)
 (check-facts :all)
(map :authors books)
(clojure.set/union (map :authors books))
(clojure.set/union (set (map :authors books)))
(set (map :authors books))
(:authors books)
(map :authors books)
(map :authors (first books))
(first books)
(:authors (first books))
(map (fn[book] (:authors book) books)
)
(map (fn[book] (:authors book) books))
(map (fn[book] (:authors book)) books)
(map :authors books)
(apply concat (map :authors books))
(set (apply concat (map :authors books)))
 (check-facts :all)
(use 'structured-data)
(authors books)
(map :authors books)
(clojure.set/union (map :authors books))
(set (apply concat (map :authors books)))
( (apply concat (map :authors books)))
(apply concat (map :authors books))
(clojure.set/union (apply concat (map :authors books)))
(apply clojure.set/union (map :authors books))
 (check-facts :all)
(use 'structured-data)
(author->string octavia)
(str "fsa" "")
(str "fsa" "sfd")
(use 'midje-repl)
(use 'midje.repl)
(autotest)
(check-facts :all)
(use 'structured-data)
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(author->string octavia)
(use 'structured-data)
(author->string octavia)
(check-facts :all)
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(check-facts :all)
(use 'structured-data)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(books-by-author china books)
(use 'structured-data)
(books-by-author china books)
(use 'structured-data)
(books-by-author china books)
(use 'structured-data)
(books-by-author china books)
(use 'structured-data)
(books-by-author china books)
(check-facts :all)
(def authors #{china, felleisen, octavia, friedman})
(authors)
authors
(str authors)
(map str authors)
(println authors)
(use 'structured-data)
(author-by-name "bala" authors)
(check-facts :all)
(use 'midje.repl)
(autotest)
(check-facts :all)
