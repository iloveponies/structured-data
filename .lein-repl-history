(Math/pow 2 5)
(Math/pow 2 3)
(+ 2 5)
(defn do-a-thing [x] (let [y (+ x x)] (Math/pow y y)))
(do-a-thing 1 1)
(do-a-thing 1)
(do-a-thing 2)
(Math/pow 4 4)
(defn spiff [v] (+ (get v 0) (get v 2)))
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2])
(get [1 2 3] 4)
(+ nil 2)
(defn cutify [v] (conj v "<3"))
(cutify [])
(cutify [1 2 3])
(cutify ["a" "b"])
(defn spiff-destructuring [v] (let [a b c] v (+ a c)))
(defn spiff-destructuring [v] (let [[a b c] v] (+ a c)))
(spiff-destructuring [1 2 3 4])
(defn rectangle [bottom-left top-right] [bottom-left top-right] 
)
(rectangle [1 1] [5 1])
(defn width [rectangle] (let [[[x1 y1] [x2 y2]] rectangle] 
(defn width [rectangle] (let [[[x1 y1] [x2 y2]] rectangle] (- x2 x1)))
(width (rectangle [1 1] [5 1]))
(width (rectangle [1 1] [1 1])) 
(width (rectangle [3 1] [10 4]))
(defn height [rectangle] (let [[[x1 y1] [x2 y2]] rectangle] (- y2 y1)))
(defn square? [rectangle] (let [[[x1 y1] [x2 y2]] rectangle] (= (- y2 y1) (- x2 x1))))
(square? (rectangle [1 1] [2 2]))
(square? (rectangle [1 1] [2 3]))
(square? (rectangle [1 1] [1 1]))
(square? (rectangle [3 2] [1 0]))
(square? (rectangle [3 2] [1 1]))
(defn area [rectangle] (let [[[x1 y1] [x2 y2]] rectangle] (* (- y2 y1) (- x2 x1))))
(area (rectangle [1 1] [5 1]))
(area (rectangle [0 0] [1 1]))
(area (rectangle [0 0] [4 3]))
(area (rectangle [3 1] [10 4]))
(defn contains-point? [rectangle point] (let [[[x1 y1] [x2 y2]] rectangle] (let [[x3 y3] point] (and (<= x1 x3 x2) (<= y1 y3 y2)))))
(defn point [x y]
  [x y])
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 2 1)) 
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1)) 
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 3)) 
(contains-point? (rectangle [1 1] [2 2])
                 (point 1 1)) 
(contains-point? (rectangle [1 1] [1 1])
                 (point 1 1))  
exit
(use 'structured-data)
(cutify [1 2])
(title-length cities)
(def cities {:title "The City and the City" :authors [china]})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(title-length cities)
(defn title-length [book] :/)
(defn title-length [book] ":/")
exit
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn title-length [book] (str "=)"))
(title-length cities)
(count :title)
(:title cities)
(count (:title cities))
(defn title-length [book] (count (:title book)))
(title-length cities)
(title-length wild-seed)
(title-length little-schemer)
(defn author-count [book] (count (:authors book)))
(author-count cities)
(author-count wild-seed)
(author-count little-schemer)
(defn multiple-authors? [book] )
(boolean )
(boolean m)
(boolean "m")
(boolean "false")
(boolean nil)
(boolean true)
(defn multiple-authors? [book] (< 1 (count (:authors book))))
(multiple-authors? cities)
(multiple-authors? wild-seed)
(multiple-authors? little-schemer)
(:authors little-schemer)
(defn add-author [book new-author] (conj (:authors book) new-author))
(add-author little-schemer {:name "Gerald J. Sussman"})
(add-author {:authors [{:name "Juhana"}]} {:name "Jani"})
(little-schemer)
little-schemer
(defn add-author [book new-author] (assoc book :authors (conj (:authors book) new-author))
)
(add-author {:authors [{:name "Juhana"}]} {:name "Jani"})
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn alive? [author] (contains? author :death-year))
(alive? china)
(alive? octavia)
(defn alive? [author] (not (contains? author :death-year)))
(alive? octavia)
(alive? china)
exit
