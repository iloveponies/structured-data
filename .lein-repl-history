(use 'structured-data :reload)
(stars 4)
(use 'structured-data :reload)
(stars 4)
(use 'structured-data :reload)
(stars 4)
(use 'structured-data :reload)
(stars 4)
(use 'structured-data :reload)
(monotonic? [1 2 3]) 
(monotonic? [1 2 1 0])
(monotonic? [0 1 10 11]) 
(monotonic? [3 2 0 -3]) 
(use 'structured-data :reload)
(monotonic? [3 2 0 -3]) 
(. System exit 0)
(conj #{:a :b :c} :a) 
(use 'structured-data)
(conj #{:a :b :c} :a)
(disj #{:a :b :c} :a)
(toggle #{:a :b :c} :d) 
(use 'structured-data :reload)
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a) 
(use 'structured-data :reload)
(count #{1 2 3})
(contains-duplicates? [1 1 2 3 -40])
(contains-duplicates? [1 2 3 -40])
(contains-duplicates? [1 2 3 "a" "a"])
(use 'structured-data :reload)
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def books [cities, wild-seed, embassytown, little-schemer])
(old-book->new-book {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(old-book->new-book {:title "Wild Seed", :authors [octavia]})
(set (:authors cities)
)
(set (:authors cities))
cities
(set (:authors cities))
(:authors cities)
(use 'structured-data :reload)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(has-author? cities china)  
(use 'structured-data :reload)
(has-author? cities china)
(has-author? cities felleisen)  
(has-author? little-schemer felleisen)
cities
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
cities
(has-author? little-schemer felleisen)
(has-author? cities felleisen)
cities
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
cities
china
(+ 3 2)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data)
(has-author? cities china)  
(contains? cities china)
(contains? cities)
(contains? cities :authors)
(contains? cities (:authors china))
(:authors )
(:authors)
(:authors china)
(cities :authors)
(contains? (cities :authors) china)
(use 'structured-data)
(has-author? cities china)
(use 'structured-data)
(has-author? cities china)
(contains? (cities :authors))
(contains? (cities :authors) china)
(has-author? cities felleisen)
(has-author? little-schemer felleisen)
(has-author? cities felleisen)
(use 'structured-data)
(has-author? cities felleisen)
(seppo)
(use 'structured-data)
(seppo)
(use 'structured-data)
(seppo)
books
seppos
seppo
books
(books :authors)
(:authors books)
(use 'structured-data)
(all-author-names books)
(. System exit 0)
(use 'structured-data :reload)
books
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
books
user/books
(has-author? cities china)      
(all-author-names books)
(use 'structured-data :reload)
(authors [cities, wild-seed])       
(all-author-names [cities, wild-seed])
(use 'structured-data :reload)
(authors [cities, wild-seed])
(apply clojure.set/union books)
(map :name (:authors cities))
(set (map :name (:authors cities)))
(all-author-names books)
(set (map :name (:authors cities))))
(set (map :name (:authors cities)))
(set (map :name (:authors little-schemer)))
(use 'structured-data :reload)
(authors [cities, wild-seed])     
(use 'structured-data :reload)
(authors [cities, wild-seed])
(use 'structured-data :reload)
(authors [cities, wild-seed])
(authors [cities, wild-seed, embassytown])
(authors [little-schemer, cities])   
(+ 1 1)
(authors [cities, wild-seed])    
(use 'structured-data :reload)
(authors [cities, wild-seed])
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(authors [cities, wild-seed])  
(use 'structured-data :reload)
(all-author-names books)
(authors [cities, wild-seed])  
books
(:authors books)
books
(map :name (:authors books))
(:authors cities)
(:authors books)
(:authors cities)
(map (:authors cities))
(use 'structured-data :reload)
(authors books)
felleisin
felleisen
friedman
(str (:name friedman) ' GG')
(str (:name friedman) GG)
(str (:name friedman) 'GG)
(str (:name friedman) )
(str (:name friedman) '( )
)
(str (:name friedman) \( )
(str (:name friedman) ' ' \( )
(str (:name friedman) '  \( )
(str (:name friedman) " (" )
(str (:name friedman) " (" " )" )
)
))
)
()
(:name friedman)
(str (:name friedman))
(. System exit 0)
(use 'structured-data :reload)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data :reload)
cities
(authors cities)
(authors 
)
  #_=> 
user=> 
user=> (authors [cities, wild-seed])     
(authors [cities, wild-seed])     
(. System exit 0)
(use 'structured-data :reload)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data :reload)
(has-author? cities china)    
(authors [cities, wild-seed])    
(all-author-names books)
(authors [cities, wild-seed, embassytown]) 
(map :name (authors books))
(map :name (authors cities))
(authors cities)
(authors [cities])
(map :name (authors [cities]))
(:name (authors [cities]))
(:name cities)
(authors books)
(map :name (authors books))
(all-author-names [cities, wild-seed])
(use 'structured-data :reload)
(authors books)
(all-author-names books)
felleisen
(if (:birth-year felleisen) true false)
(if (:birth-year friedman) true false)
(if (:birth-year friedman) (str (:birth-year friedman)) false)
name
fdsd
(use 'structured-data :reload)
(author->string felleisen) 
(use 'structured-data :reload)
(author->string felleisen)
(use 'structured-data :reload)
(author->string felleisen)
(author->string friedman) 
(author->string octavia)
(use 'structured-data :reload)
(author->string octavia)
(map (author->string (authors books)))
(authors books)
(:authors books)
cl
(if ("seppo") true false)
(if (str ("seppo")) true false)
(if ("seppo") true false)
(if ("") true false)
"seppo"
(blank? "seppo")
(true? "seppo")
(true? "")
(true? true)
(string? "")
(blank? "")
(clojure.string/blank? "")
(clojure.string/blank? "dsd")
(author->string felleisen)
(:birth-year felleisen)
(if (:birth-year felleisen) (str " (" (:birth-year author) " - ") "")
(if (:birth-year felleisen) (str " (" (:birth-year felleisen) " - ") "")
(if (clojure.string/blank? (if (:birth-year felleisen) (str " (" (:birth-year felleisen) " - ") "") true false)
)
(if (clojure.string/blank? (if (:birth-year felleisen) (str " (" (:birth-year felleisen) " - ") "") true false))
(use 'structured-data :reload)
(defn birth-year [author] (if (:birth-year author) (str " (" (:birth-year author) " - ") ""))
(birth-year seppo)
(birth-year felleisen)
(if (clojure.string/blank? (birth-year felleisen) true false))
(if (clojure.string/blank? (birth-year felleisen)) true false))
(if (clojure.string/blank? (birth-year felleisen)) true false)))
(if (clojure.string/blank? (birth-year felleisen)) true false)
(if (clojure.string/blank? (birth-year felleisen)) ")" "")
(use 'structured-data :reload)
(authors [cities, wild-seed])
(use 'structured-data :reload)
(authors books)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data :reload)
(authors books)
(map :name (authors books))
(use 'structured-data :reload)
(all-author-names books)
(map :name (authors books))
(apply clojure.set/union (map :name (authors books)))
(set (map :name (authors books)))
(use 'structured-data :reload)
(author->string felleisen)
(author->string friedman) 
(author->string octavia)
(apply str (interpose ", " (map author->string (authors books)))))
(apply str (interpose ", " (map author->string (authors books))))
(authors->string (:authors little-schemer))
(apply str (interpose ", " (map author->string authors))
)
(apply str (interpose ", " (map author->string authors)))
(map author->string authors)
(authors->string (:authors little-schemer))
(map author->string (:authors little-schemer))
(interpose ", " (map author->string (:authors little-schemer)))
(str (interpose ", " (map author->string (:authors little-schemer))))
(apply str (interpose ", " (map author->string (:authors little-schemer))))
(use 'structured_data :reload)
(use 'structured-data :reload)
(authors->string (:authors little-schemer))
(authors cities)
(:authors cities)
(author->string cities)
(:name cities)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(:name cities)
(:title cities)
(use 'structured_data :reload)
(use 'structured-data :reload)
(book->string wild-seed) 
(if (> 2 1) (str "s") (str ""))
(if (> 1 1) (str "s") (str ""))
(use 'structured-data :reload)
(books->string [])
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(use 'structured-data :reload)
(books->string [little-schemer, cities, wild-seed])
(str (map book->string books))
(map book->string books)
(use 'structured-data :reload)
(books->string [little-schemer, cities, wild-seed])
(map book->string books)
(use 'structured-data :reload)
(books->string [little-schemer, cities, wild-seed])
(concat (str "seppo"))
(str (str "Juuh"))
(use 'structured-data :reload)
(books->string [little-schemer, cities, wild-seed])
(use 'structured-data :reload)
(books->string [little-schemer, cities, wild-seed])
(use 'structured-data :reload)
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(use 'structured-data :reload)
(books-by-author china books)  
(books-by-author octavia books)
(def authors #{china, felleisen, octavia, friedman})
(def authorz #{china, felleisen, octavia, friedman})
authorz
(map :name authorz)
(:name cities)
(use 'structured-data :reload)
(author-by-name "Octavia E. Butler" authors)     
(:name china)
(use 'structured-data :reload)
(author-by-name "Octavia E. Butler" authors)
(filter (fn [author] (= name (:name author))) authors))
(filter (fn [author] (= name (:name author))) authors)))
(filter (fn [author] (= name (:name author))) authors)
(= "Octavia E. Butler" (:name octavia))
(def authors #{china, felleisen, octavia, friedman})
(filter (fn [author] (= name (:name author))) authorz)
(author-by-name "Octavia E. Butler" authors)     
(author-by-name "Octavia E. Butler" authorz)     
(alive? china)
(use 'structured-data :reload)
(living-authors authors)    
(living-authors authorz)
(filter (fn [author] (alive? author) authorz))
(use 'structured-data :reload)
(living-authors authorz)
(:authors cities)
(living-authors (:authors cities))
(use 'structured-data :reload)
(has-a-living-author? wild-seed)   
(has-a-living-author? silmarillion)  
(use 'structured-data :reload)
(has-a-living-author? wild-seed)
(has-a-living-author? silmarillion) 
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(use 'structured-data :reload)
(has-a-living-author? wild-seed)     
(has-a-living-author? silmarillion) 
(has-a-living-author? little-schemer) 
(has-a-living-author? cities)  
(has-a-living-author? deus-irae) 
(living-authors wild-seed)
(living-authors cities)
(living-authors deus-irae)
(alive? dick)
(use 'structured-data :reload)
(alive? dick)
(living-authors deus-irae)
(living-authors authors)   
(living-authors #{octavia})    
(living-authors #{china, felleisen}) 
(living-authors authors)   
(living-authors authorz)
(living-authors (:authors deus-irae))
(use 'structured-data :reload)
(living-authors (:authors deus-irae))
(has-a-living-author? wild-seed)     
books
(filter has-a-living-author? books))
(filter has-a-living-author? books)
