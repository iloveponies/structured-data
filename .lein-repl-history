(use 'structured-data)
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2])
(spiff [])
1 + nil
(+ 1 nil)
(use 'structured-data :reload)
(cutify [1 2 3])
(cutify [])
(use 'structured-data :reload)
(spiff-destructing [1 2 3])
(spiff-destructuring [1 2 3])
(spiff-destructuring [1 2 10])
(spiff-destructuring [1 2])
clear
(use 'structured-data :reload)
(width (rectangle [1 1] [5 1]))
(use 'structured-data :reload)
(height (rectangle [1 1] [5 1]))
(height (rectangle [1 1] [5 5]))
(use 'structured_data)
(use 'structured-data)
(square [[1 1] [2 2]])
(square? [[1 1] [2 2]])
(square? [[1 1] [2 3]])
(use 'structured-data :reload)
(area [[1 1] [2 3]])
(area [[1 1] [2 2]])
(area (rectangle [1 1] [5 1]))
(square? (rectangle [1 1] [5 1]))
(area (rectangle [0 0] [4 3])) 
(use 'structured_data)
(use 'structured-data)
contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))  
(
contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))  )
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))   
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1))   
(contains-point? (rectangle [1 1] [1 1])
                 (point 1 1))   
(use 'structured-data)
(element-lenght [[1 2 3] "abs" [3]])
(element-lengths [[1 2 3] "abs" [3]])
(use 'structured-data :reload)
(second-elements [[1 2 3] "abs" [3]])
(use 'structured-data :reload)
(stars 5)
(stars 10)
(stars 3)
(use 'structured-data :reload)
(monotonic? [1 2 3])
(monotonic? [1 2 1])
(monotonic? [-10 0 1])
(monotonic? [-10 -11 -12])
(monotonic? [-10 -11 -10])
(str nil nil)
(str "(" nil)
(use 'structured-data :reload)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(author->string (first (:author little-schemer)))
(author->string (first (:authors little-schemer)))
(author->string felleisen)
(author->string octavia)
(authors->string (:authors little-schemer))
(authors->string #{octavia})
(book->string wild-seed)
(book->string little-schemer)
(= "The Little Schemer, written by Daniel Friedman (1944 - ), Matthias Felleisen" (book->string little-schemer))
(book->string little-schemer)
def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(use 'structured-data)
def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
cities
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(books)
book
books
(books->string books)
(books->str [])
(use 'structured-data)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(books->string [])
(books->string books)
(use 'structured-data :reload)
(books->string books)
(use 'structured-data :reload)
(books->string books)
(books->string [])
(first [])
(doc contains?)
(doc assoc)
