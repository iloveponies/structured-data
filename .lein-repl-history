(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(authors [cities, wild-seed]) 
(defn authors [books]
  (apply clojure.set/union (:authors books)))
(authors [cities, wild-seed]) 
(:authors [cities, wild-seed)
(:authors [cities, wild-seed])
q
exit
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(:authors cities)
(set :authors cities)
exit
(set :authors cities)
(:authors cities)
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(:authors cities)
(map :authors [cities, wild-seed])
(apply apply clojure.set/union (map :authors [cities, wild-seed]))
(apply clojure.set/union (map :authors [cities, wild-seed]))
(defn authors [books]
(apply clojure.set/union (map :authors books)))
(defn all-author-names [books]
  (apply :name (authors books))
)
(all-author-names books)
(map :name cities)
(map :name (authors book))
(map :name (authors books))
(apply :name (authors books))
(map :name (authors books))
(set (map :name (authors books)))
(:name felleisen)
(str nil)
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")"]
  (str name year))))
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")")]
  (str name year))))
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")")]
  (str name years))))
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")")]
  (str name years)))
(author->string felleisen)
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")")]
  (if (:birth-year author)
  (str name years)
  str name)))
(if (:name felleisen) "joo" "ei")
(defn author->string [author]
  (let [name (:name author)
  years (str "(" (:birth-year author) " - " (:death-year author) ")")]
  (if (:birth-year author)
  (str name years)
  name)))
(author->string felleisen)
(author->string friedman)
(author->string octavia)
exit
(defn author->string [author]
  (let [birth (:birth-year author)
  years (if birth
  (str " (" birth " - " (:death-year author) ")")
  nil)]
  (str (:name author) years)))
exit
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(defn author->string [author]
  (let [birth (:birth-year author)
  years (if birth
  (str " (" birth " - " (:death-year author) ")")
  "")]
  (str (:name author) years)))
(defn authors->string [authors]
  (interpose ";" authors))
(authors->string (:authors little-schemer))
(defn authors->string [authors]
  (apply str (interpose ";" authors))
)
(authors->string (:authors little-schemer))
(defn authors->string [authors]
  (apply str (interpose ", " authors)))
(authors->string (:authors little-schemer))
(defn authors->string [authors]
  (apply str (interpose ", " (map author->string authors))))
(authors->string (:authors little-schemer))
wild-seed
(defn book->string [book]
  (str (:title book) ", written by " (authors->string (:authors book))))
(book->string wild-seed)
(authors->string #{}) 
(defn books->string [books]
  (let [books-amount (count books)
        books-string (str (apply str (interpose ", " (map book->string books))) ".")
  (cond
    (== books-amount 0) "No books."
    (== books-amount 1) (str "1 book. " books-string)
    :else (str books-amount " books. " books-string))))
(defn books->string [books]
  (let [books-amount (count books)
        books-string (str (apply str (interpose ", " (map book->string books))) ".")]
  (cond
    (== books-amount 0) "No books."
    (== books-amount 1) (str "1 book. " books-string)
    :else (str books-amount " books. " books-string))))
(books->string [])
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(def authors #{china, felleisen, octavia, friedman})
(defn books-by-author [author books]
  (filter (has-author? author) books))
(defn has-author? [book author]
  (contains? (:authors book) author))
(defn books-by-author [author books]
  (filter (has-author? author) books))
(books-by-author china books) 
(defn books-by-author [author books]
  (filter (has-author? book author) books))
(defn books-by-author [author books]
  (filter (fn [book] (contains? (:authors book) author)) books))
authors
(defn author-by-name [name authors]
  (first (filter (fn [author] (= (:name author) name) authors))))
(author-by-name "Octavia E. Butler" authors)
(defn author-by-name [name authors]
  (first (filter (fn [author] (= (:name author) name)) authors)))
(author-by-name "Octavia E. Butler" authors)
(def authors #{china, felleisen, octavia, friedman})
(author-by-name "Octavia E. Butler" authors)
(defn author-by-name [name authors]
  (filter (fn [author] (= (:name author) name)) authors))
(author-by-name "Octavia E. Butler" authors)
  (filter (fn [author] (= (:name author) name)) authors))(defn author-by-name [name authors]
  (first (filter (fn [author] (= (:name author) name)) authors)))
(defn author-by-name [name authors]
  (first (filter (fn [author] (= (:name author) name)) authors)))
(author-by-name "Octavia E. Butler" authors)
(author-by-name "Octavia E. Butler" #{felleisen, friedman})
(author-by-name "China Miéville" authors)
(author-by-name "Goerge R. R. Martin" authors)  
quit
(defn living-authors [authors]
  (filter alive? authors))
(defn alive? [author]
  (not (contains? author :death-year)))
(defn living-authors [authors]
  (filter alive? authors))
(living-authors authors) 
(defn living-authors [authors]
  (filter (fn [author] (alive? author)) authors))
(living-authors authors) 
(def authors #{china, felleisen, octavia, friedman})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(def authors #{china, felleisen, octavia, friedman})
(living-authors authors) 
(defn living-authors [authors]
  (filter alive? authors))
(living-authors authors) 
(living-authors #{octavia}) 
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(defn has-a-living-author? [book]
  (empty? (living-authors (:authors book))))
(has-a-living-author? wild-seed)
(has-a-living-author? silmarillion)
(has-a-living-author? little-schemer)
(has-a-living-author? cities) 
(defn books-by-living-authors [books]
  (filter has-a-living-author? books))
(books-by-living-authors books)
(books-by-living-authors (concat books [deus-irae, silmarillion]))
(defn has-a-living-author? [book]
  (not (empty? (living-authors (:authors book)))))
(books-by-living-authors books)
exit
