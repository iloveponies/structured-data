;; Anything you type in here will be executed
;; immediately with the results shown on the
;; right.



(defn monotonic? [a-seq]
  (cond
    (apply <= a-seq) true
    (apply >= a-seq) true
    :else false
    ))



(monotonic? [1 2 3])     ;=> true
(monotonic? [0 1 10 11]) ;=> true
(monotonic? [3 2 0 -3])  ;=> true
(monotonic? [3 2 2])     ;=> true    Not strictly monotonic
(monotonic? [1 2 1 0])



(defn toggle [a-set elem]
  (if (contains? a-set elem)  (disj a-set elem) (conj a-set elem)
    ))

(toggle #{:a :b :c} :d) ;=> #{:a :c :b :d}
(toggle #{:a :b :c} :a) ;=> #{:c :b}



(defn contains-duplicates? [a-seq]
  (let [x (count a-seq)]
    (if (< (count (set a-seq)) x) true false)
    ))

(contains-duplicates? [1 1 2 3 -40]) ;=> true
(contains-duplicates? [1 2 3 -40]) ;=> false
(contains-duplicates? [1 2 3 "a" "a"]) ;=> true






(defn old-book->new-book [book]
  (let [new (set (:authors book))]
    (assoc book :authors new)
    ))




(old-book->new-book
  {:awards ["Hugo" "World Fantasy Award" "Arthur C. Clarke Award"
            "British Science Fiction Award"]
   :title "The City and the City"
   :authors [{:birth-year 1972, :name "China Miéville"}]})


(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})

(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})

(def books [cities, wild-seed, embassytown, little-schemer])




(defn has-author? [book author]
  (if (contains? (:authors book) author) true false
    ))


(has-author? cities china)             ;=> true
(has-author? cities felleisen)         ;=> false
(has-author? little-schemer felleisen) ;=> true
(has-author? little-schemer friedman)  ;=> true
(has-author? little-schemer octavia)   ;=> false




(defn authors [books]
  (apply clojure.set/union (map :authors books)))

(:authors cities)



(defn all-author-names [books]
  (set (map :name (authors books))))


(all-author-names books)
;=> #{"Matthias Felleisen" "China Miéville"
;     "Octavia E. Butler" "Daniel Friedman"}
(all-author-names [cities, wild-seed])
;=> #{"China Miéville" "Octavia E. Butler"}
(all-author-names []) ;=> #{}


(defn author->string [author]
  (let [name (:name author)
        by (:birth-year author)
        dy (:death-year author)]
    (if (or by dy)
      (apply str [name, " (", by, " - ", dy, ")"]) (str name)
    )
  )
)



(author->string felleisen) ;=> "Matthias Felleisen"
(author->string friedman)  ;=> "Daniel Friedman (1944 - )"
(author->string octavia)



(defn authors->string [authors]
  (apply str (interpose ", " (map author->string authors))))


(authors->string (:authors little-schemer))
;=> "Daniel Friedman (1944 - ), Matthias Felleisen"
(authors->string #{octavia})          ;=> "Octavia E. Butler (1947 - 2006)"
(authors->string #{})                 ;=> ""
(authors->string #{octavia, friedman})




(defn book->string [book]
  (apply str [(:title book), ", written by ", (authors->string (:authors book))]
         ))



(book->string wild-seed) ;=> "Wild Seed, written by Octavia E. Butler"
(book->string little-schemer)



(defn books->string [books]
  (let [bookCount (count books)]
    (if (= bookCount 0) "No books."
      (str bookCount (if (= bookCount 1) " book. " " books. ")
           (apply str (interpose ". " (map book->string books)))))))


(books->string []) ;=> "No books."
(books->string [cities])
;=> "1 book. The City and the City, written by China Miéville (1972 - )."
(books->string [little-schemer, cities, wild-seed])
(defn books-by-author [author books]
  (let [check (fn [book] (has-author? book author))]
          (filter check books)))

(books-by-author china books)   ;=> (cities embassytown)
(books-by-author octavia books) ;=> (wild-seed)



(def authors #{china, felleisen, octavia, friedman})


(defn author-by-name [name authors]
  (let [hasName (fn [author book] (if (= name (:name author)) true false))
        check (fn [author] (hasName author name))
        filt (filter check authors)]
    (if (> (count filt) 0) (apply str filt) nil)
    ))


(author-by-name "Octavia E. Butler" authors)                ;=> octavia
(author-by-name "Octavia E. Butler" #{felleisen, friedman}) ;=> nil
(author-by-name "China Miéville" authors)                   ;=> china
(author-by-name "Goerge R. R. Martin" authors)



(defn living-authors [authors]
  (let [has-died (fn [author] (if (:death-year author) false true))]
    (filter has-died authors)))

  (living-authors authors)             ;=> (china, felleisen, friedman)
(living-authors #{octavia})          ;=> ()
(living-authors #{china, felleisen}) ;=> (china, felleisen)


(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})

(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})


(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})

(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})






(defn living-authors [authors]
  (let [has-died (fn [author] (if (:death-year author) false true))]
    (filter has-died authors)))


(defn has-a-living-author? [book]
  (let [has-died (fn [author] (if (:death-year author) false true))
        authors (:authors book)
        filt (filter has-died authors)]
    (if (> (count filt) 0) true false))
  )

(has-a-living-author? wild-seed)      ;=> false
(has-a-living-author? silmarillion)   ;=> true
(has-a-living-author? little-schemer) ;=> true
(has-a-living-author? cities)         ;=> true
(has-a-living-author? deus-irae)      ;=> false


(defn books-by-living-authors [books]
  filter has-a-living-author? books)


(books-by-living-authors books) ;=> (little-schemer cities embassytown)
(books-by-living-authors (concat books [deus-irae, silmarillion]))
;=> (little-schemer cities embassytown silmarillion)





(defn add-author [book new-author]
  (assoc book :authors (conj (get book :authors) new-author)))


(add-author little-schemer {:name "Gerald J. Sussman"})
;=> {:title "The Little Schemer"
;    :authors [{:birth-year 1944, :name "Daniel Friedman"}
;              {:name "Matthias Felleisen"}
;              {:name "Gerald J. Sussman"}]}
(add-author {:authors [{:name "Juhana"}]} {:name "Jani"})
;=> {:authors [{:name "Juhana"} {:name "Jani"}]}


(defn book->string [book]
  (apply str [(:title book), ", written by ", (authors->string (:authors book))]
         ))




