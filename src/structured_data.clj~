(ns structured-data)

(defn do-a-thing [x]
  (let [xx (+ x x)]	
    (Math/pow xx xx) ))

(defn spiff [v]
  (let [x (get v 0)
	y (get v 2)]
	(+ x y)))

(defn cutify [v]
  (conj v "<3"))

(defn spiff-destructuring [v]
  (let [[x y z] v]
	(+ x z)))

(defn point [x y]
  [x y])

(defn rectangle [bottom-left top-right]
  [bottom-left top-right])

(defn width [[[x1] [x2]]]
  (- x2 x1))

(defn height [[[x1 y1] [x2 y2]]]
	(- y2 y1)
  )

(defn square? [[[x1 y1] [x2 y2]]]
  (== (- x2 x1) (- y2 y1))
  )

(defn area [[[x1 y1] [x2 y2]]]
  (* (- x2 x1) (- y2 y1))
  )

(defn contains-point? [[[x1 y1] [x2 y2]] [x y]]
  (and (<= x1 x x2) (<= y1 y y2)))

(defn contains-rectangle? [outer [point1 point2]]
  (and (contains-point? outer point1) (contains-point? outer point2)))

(defn title-length [book]
  (count (get book :title)))

(defn author-count [book]
  (count (get book :authors)))

(defn multiple-authors? [book]
  (if (> (author-count book) 1) true false))

(defn add-author [book new-author]
  (let [authors (get book :authors)]
	(assoc book :authors (conj authors new-author))))

(defn alive? [author]
  (not (contains? author :death-year)))

(defn element-lengths [collection]
  (map count collection))

(defn second-elements [collection]
  (let [sec (fn [coll] (get coll 1))] 
	(map sec collection)))

(defn titles [books]
  (map :title books))

(defn monotonic? [a-seq]
	(let [inc? (fn [x] (apply <= x))
		dec? (fn [x] (apply >= x))]
	(or (inc? a-seq) (dec? a-seq)))  
)

(defn stars [n]
  (apply str (repeat n \*)))

(defn toggle [a-set elem]
  (if (contains? a-set elem) (disj a-set elem) (conj a-set elem)))

(defn contains-duplicates? [a-seq]
  (not (== (count a-seq) (count (set a-seq)))))

(defn old-book->new-book [book]
  (let [authors (set (:authors book))]
	(assoc book :authors authors)))

(defn has-author? [book author]
  (contains? (:authors book) author))

(defn authors [books]
  (apply clojure.set/union (map :authors books)))

(defn all-author-names [books]
  (set (map :name (authors books))))

(defn author->string [author]
  (let [name (:name author)
	year (cond (contains? author :death-year) (str "(" (:birth-year author) " - " (:death-year author) ")") (contains? author :birth-year) (str "(" (:birth-year author) " - )") :else nil)]
	(if year (str name " " year) name)	
	))

(defn authors->string [authors]
  (apply str (interpose ", " (map author->string authors))))

(defn book->string [book]
  (str (:title book) ", written by " (authors->string (:authors book))))

(defn books->string [books]
  (let [num (count books)
	num-books (cond (== num 0) "No books." (== num 1) "1 book. " :else (str num " books. "))
	authors (apply str (interpose ". " (map book->string books)))	
	]
      (cond (== num 0) num-books :else (str num-books authors "."))
))

(defn books-by-author [author books]
  (let [by-author? (fn [book] (has-author? book author))]
  (filter by-author? books)))

(defn author-by-name [name authors]
	 (let [author-name? (fn [author] (= (:name author) name))
	      names (filter author-name? authors)]
	(if (empty? names) nil (first names))  
))

(defn living-authors [authors]
  (filter alive? authors))

(defn has-a-living-author? [book]
  (not (empty? (living-authors (:authors book)))))

(defn books-by-living-authors [books]
  (filter has-a-living-author? books))

; %________%
